//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2020-04-22 11:56:03
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using RebelRentals.Data;
using Microsoft.AspNetCore.Http;
using System.Security.Claims;
using RebelRentals.Models;

namespace RebelRentals
{

    public partial class OrdersDbContext : ApplicationDbContext
    {
        private readonly IHttpContextAccessor _httpContextAccessor;

        public OrdersDbContext(DbContextOptions<ApplicationDbContext> options, IHttpContextAccessor httpContextAccessor) :
            base(options)
        {
            _httpContextAccessor = httpContextAccessor;
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("aspnet_RebelRentals_53bc9b9d_9d6a_45d4_8429_2a2761773502ModelConnectionString"));
                optionsBuilder.UseLazyLoadingProxies();
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<AspNetUserRole> AspNetUserRoles
        {
            get;
            set;
        }

        public virtual DbSet<AspNetUser> AspNetUsers
        {
            get;
            set;
        }

        public virtual DbSet<JunctionShipOrder> JunctionShipOrders
        {
            get;
            set;
        }

        public virtual DbSet<Order> Orders
        {
            get;
            set;
        }

        public virtual DbSet<Ship> Ships
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.AspNetUserRoleMapping(modelBuilder);
            this.CustomizeAspNetUserRoleMapping(modelBuilder);

            this.AspNetUserMapping(modelBuilder);
            this.CustomizeAspNetUserMapping(modelBuilder);

            this.JunctionShipOrderMapping(modelBuilder);
            this.CustomizeJunctionShipOrderMapping(modelBuilder);

            this.OrderMapping(modelBuilder);
            this.CustomizeOrderMapping(modelBuilder);

            this.ShipMapping(modelBuilder);
            this.CustomizeShipMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region AspNetUserRole Mapping

        private void AspNetUserRoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUserRole>().ToTable(@"AspNetUserRoles", @"dbo");
            modelBuilder.Entity<AspNetUserRole>().Property<string>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AspNetUserRole>().Property<string>(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AspNetUserRole>().HasKey(@"UserId", @"RoleId");
        }

        partial void CustomizeAspNetUserRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetUser Mapping

        private void AspNetUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUser>().ToTable(@"AspNetUsers", @"dbo");
            modelBuilder.Entity<AspNetUser>().Property<string>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AspNetUser>().Property<string>(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<AspNetUser>().Property<string>(x => x.NormalizedUserName).HasColumnName(@"NormalizedUserName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<AspNetUser>().Property<string>(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<AspNetUser>().Property<string>(x => x.NormalizedEmail).HasColumnName(@"NormalizedEmail").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<AspNetUser>().Property<bool>(x => x.EmailConfirmed).HasColumnName(@"EmailConfirmed").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property<string>(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property<string>(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property<string>(x => x.ConcurrencyStamp).HasColumnName(@"ConcurrencyStamp").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property<string>(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property<bool>(x => x.PhoneNumberConfirmed).HasColumnName(@"PhoneNumberConfirmed").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property<bool>(x => x.TwoFactorEnabled).HasColumnName(@"TwoFactorEnabled").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property<System.DateTimeOffset?>(x => x.LockoutEnd).HasColumnName(@"LockoutEnd").HasColumnType(@"datetimeoffset").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property<bool>(x => x.LockoutEnabled).HasColumnName(@"LockoutEnabled").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property<int>(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().HasKey(@"Id");
            modelBuilder.Entity<AspNetUser>().HasIndex(@"NormalizedUserName").IsUnique(true);
        }

        partial void CustomizeAspNetUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region JunctionShipOrder Mapping

        private void JunctionShipOrderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<JunctionShipOrder>().ToTable(@"JunctionShipOrder", @"dbo");
            modelBuilder.Entity<JunctionShipOrder>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<JunctionShipOrder>().Property<int>(x => x.ShipId).HasColumnName(@"ShipId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<JunctionShipOrder>().Property<string>(x => x.CustomerId).HasColumnName(@"CustomerId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<JunctionShipOrder>().HasKey(@"Id");
        }

        partial void CustomizeJunctionShipOrderMapping(ModelBuilder modelBuilder);

        #endregion

        #region Order Mapping

        private void OrderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Order>().ToTable(@"Orders", @"dbo");
            modelBuilder.Entity<Order>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Order>().Property<System.DateTime>(x => x.Date).HasColumnName(@"Date").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().HasKey(@"Id");
        }

        partial void CustomizeOrderMapping(ModelBuilder modelBuilder);

        #endregion

        #region Ship Mapping

        private void ShipMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Ship>().ToTable(@"Ship", @"dbo");
            modelBuilder.Entity<Ship>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Ship>().Property<string>(x => x.Model).HasColumnName(@"Model").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Ship>().Property<string>(x => x.Class).HasColumnName(@"Class").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Ship>().Property<int>(x => x.MaxSpeed).HasColumnName(@"MaxSpeed").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Ship>().Property<int>(x => x.Length).HasColumnName(@"Length").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Ship>().Property<int>(x => x.Width).HasColumnName(@"Width").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Ship>().Property<int>(x => x.Height).HasColumnName(@"Height").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Ship>().Property<double>(x => x.Price).HasColumnName(@"Price").HasColumnType(@"float").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0.0000000000000000e+000");
            modelBuilder.Entity<Ship>().Property<int>(x => x.NumberOfPopulation).HasColumnName(@"NumberOfPopulation").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Ship>().Property<string>(x => x.About).HasColumnName(@"About").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<Ship>().HasKey(@"Id");
        }

        partial void CustomizeShipMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUserRole>().HasOne(x => x.AspNetUser).WithMany(op => op.AspNetUserRoles).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"UserId");

            modelBuilder.Entity<JunctionShipOrder>().HasOne(x => x.Ship).WithMany(op => op.JunctionShipOrders).IsRequired(true).HasForeignKey(@"ShipId");
            modelBuilder.Entity<JunctionShipOrder>().HasOne(x => x.Order).WithOne(op => op.JunctionShipOrder).IsRequired(true).HasForeignKey(typeof(JunctionShipOrder), @"Id");
            modelBuilder.Entity<JunctionShipOrder>().HasOne(x => x.AspNetUser).WithMany(op => op.JunctionShipOrders).IsRequired(true).HasForeignKey(@"CustomerId");

            modelBuilder.Entity<Order>().HasOne(x => x.JunctionShipOrder).WithOne(op => op.Order).IsRequired(true).HasForeignKey(typeof(JunctionShipOrder), @"Id");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
